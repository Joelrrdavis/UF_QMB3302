


Title: Python Arithmetic
1) What would result from running the following code in Python?

<pre>2 + 3</pre>

a) 23
@ No. The '+' operator adds numbers in Python, not concatenates them as strings.
*b) 5
@ Yes. 2 + 3 is equal to 5, as '+' is the addition operator in Python.
c) "2 + 3"
@ No. Quotation marks turn code into a string, not an operation.
d) SyntaxError
@ No. There is no syntax error in this expression.

Title: Variable Naming Rules
2) Which of the following is a valid variable name in Python?

a) 2variable
@ No. Variable names cannot start with a number.
*b) variable_1
@ Yes. Python allows variable names to include letters, numbers, and underscores, but they cannot start with a number.
c) var-name
@ No. Hyphens are not allowed in Python variable names.
d) variable 1
@ No. Spaces are not allowed in variable names.

Title: Understanding Multiplication
3) What will be the output of the following code?

<pre>print(2 * 3)</pre>

a) 5
@ No. Multiplication is not addition.
*b) 6
@ Yes. 2 multiplied by 3 equals 6.
c) 2 * 3
@ No. This is not the result but the expression itself.
d) SyntaxError
@ No. This code is valid.

Title: Error Identification
4) What error does this code contain?

<pre>print("Hello World</pre>

a) Missing parentheses
@ No. The parentheses are present. Look carefully at the string.
*b) Missing closing quotation mark
@ Yes. The code lacks a closing quotation mark, which causes a syntax error.
c) Extra indentation
@ No. There is no indentation issue here.
d) Missing variable declaration
@ No. Printing does not require variables.

Title: String Repetition
5) What does the following code do?

<pre>x = "Python"
print(x * 2)</pre>

a) Throws an error
@ No. Multiplying a string by an integer repeats the string.
*b) Prints "PythonPython"
@ Yes. The string is repeated twice.
c) Prints x two times
@ No. The value of `x` is printed twice, not the variable name.
d) Multiplies the string
@ No. Strings are not numerically multiplied.

Title: String Concatenation
6) Predict the output of the following code:

<pre>print("2" + "3")</pre>

a) 5
@ No. This concatenates strings, not numbers.
*b) 23
@ Yes. The '+' operator concatenates "2" and "3" into "23".
c) SyntaxError
@ No. This operation is valid for strings.
d) 2 3
@ No. There are no spaces between the strings.

Title: Debugging Code
7) What is the correct way to fix this code?

<pre>y = 10
x = y + "2"</pre>

a) Replace "2" with 2
@ Yes. Using 2 (an integer) fixes the code.
*b) Use int("2") to convert the string
@ Correct. Converting "2" to an integer allows it to be added to `y`.
c) Use str(y)
@ No. This concatenates strings instead of adding values.
d) Remove the + operator
@ No. This removes the operation entirely.

Title: Predicting Loops
8) What does the following code print?

<pre>for i in range(3):
    print("Hello", i * 2)</pre>

a) "Hello 2" three times
@ No. The value of `i` changes in each iteration.
*b) "Hello 0", "Hello 2", "Hello 4"
@ Yes. `i` takes values 0, 1, 2, and multiplies by 2.
c) "Hello 0" only
@ No. The loop runs three times.
d) Throws an error
@ No. This code is valid.

Title: Writing Simple Code
9) Which of the following prints the sum of 7 and 5?

a) print("7 + 5")
@ No. This prints the string "7 + 5".
b) print("7" + "5")
@ No. This concatenates strings into "75".
*c) print(7 + 5)
@ Yes. This calculates and prints the sum.
d) x = 7, y = 5, print x + y
@ No. This is invalid syntax.

Title: Understanding Division
10) What is the output of this code?

<pre>print(10 / 2)</pre>

a) 5
@ No. Be careful; this operation produces a float.
*b) 5.0
@ Yes. Division always returns a float in Python 3.
c) 10
@ No. This is not the result of division.
d) SyntaxError
@ No. The code is valid.

Title: Understanding Types
11) What type of data is the following?

<pre>x = 5.0</pre>

a) Integer
@ No. Integers do not include decimals.
*b) Float
@ Yes. Floats include numbers with decimals, such as 5.0.
c) String
@ No. Strings are enclosed in quotes.
d) Boolean
@ No. Booleans represent True or False values.

Title: Identifying Code Output
12) What will the following code print?

<pre>print(2 ** 3)</pre>

a) 6
@ No. The '**' operator is used for exponentiation, not multiplication.
*b) 8
@ Yes. 2 raised to the power of 3 equals 8.
c) 2*3
@ No. This represents multiplication, not exponentiation.
d) SyntaxError
@ No. The code is valid.

Title: Debugging Python Code
13) Why does the following code cause an error?

<pre>print(5 / 0)</pre>

a) Division by a float
@ No. The issue is not related to the data type.
*b) Division by zero
@ Yes. Division by zero is undefined and causes a runtime error.
c) Missing parentheses
@ No. The parentheses are correct.
d) String error
@ No. There are no strings in this code.

Title: Logical Operators
14) What will the following code return?

<pre>print(10 > 5 and 5 > 2)</pre>

a) False
@ No. Both conditions are true, so the result is not False.
*b) True
@ Yes. Both comparisons are true, so the 'and' operator evaluates to True.
c) None
@ No. None is not returned in this case.
d) SyntaxError
@ No. This code is syntactically valid.

Title: String Indexing
15) What does the following code print?

<pre>text = "Python"
print(text[1])</pre>

a) P
@ No. Indexing starts at 0 in Python.
*b) y
@ Yes. Index 1 refers to the second character in the string "Python".
c) t
@ No. This is at index 2, not 1.
d) SyntaxError
@ No. The code is valid.

Title: Predicting Loop Behavior
16) What does the following code print?

<pre>for i in range(2):  
    print("Number:", i)</pre>

a) Number: 2
@ No. The loop runs for i = 0 and i = 1, not 2.
*b) Number: 0, Number: 1
@ Yes. The loop iterates through the range [0, 1].
c) Number: 1, Number: 2
@ No. The range ends before 2.
d) Throws an error
@ No. The code runs correctly.

Title: Boolean Values
17) What is the output of the following code?

<pre>print(bool(0))</pre>

a) True
@ No. Zero is evaluated as False in a Boolean context.
*b) False
@ Yes. In Python, 0 is considered False.
c) 0
@ No. The 'bool()' function outputs True or False, not integers.
d) SyntaxError
@ No. The code is valid.

Title: Understanding Lists
18) What does the following code print?

<pre>numbers = [1, 2, 3]
print(numbers[0])</pre>

a) 1
@ Yes. Index 0 accesses the first element of the list.
*b) 1
@ Correct. Lists are zero-indexed, and the first element is 1.
c) 2
@ No. Index 1 would return 2.
d) SyntaxError
@ No. This code is valid.

Title: Evaluating String Methods
19) What will the following code output?

<pre>text = "python".upper()
print(text)</pre>

a) python
@ No. The '.upper()' method converts all letters to uppercase.
*b) PYTHON
@ Yes. The '.upper()' method changes all characters to uppercase.
c) Python
@ No. This would only capitalize the first letter.
d) Throws an error
@ No. The code is valid.

Title: Understanding Modulus Operator
20) What will the following code print?

<pre>print(10 % 3)</pre>

a) 3
@ No. The modulus operator returns the remainder, not the divisor.
*b) 1
@ Yes. 10 divided by 3 leaves a remainder of 1.
c) 0
@ No. There is a remainder of 1 in this operation.
d) 10
@ No. This is the dividend, not the result of the modulus.

Title: Analyzing Code Output
21) What will be the result of the following code?
<pre>x = "5"
y = 2
print(x * y)</pre>

a) 7
@ No. Multiplication of a string by an integer does not perform arithmetic addition.
*b) 555
@ Yes. The string "5" is repeated 2 times, resulting in "55".
c) 5 * 2
@ No. The output is the result of executing the operation, not the operation itself.
d) SyntaxError
@ No. Multiplying a string by an integer is valid in Python.

Title: Debugging Python Code
22) Consider the following code snippet:
<pre>y = 10
x = y + "2"</pre>

What is the best way to fix this code to avoid an error?

a) Replace "2" with 2
@ Yes. Changing "2" to an integer allows addition since 'y' is also a number.
*b) Use int("2") to convert the string to an integer
@ Correct. Converting "2" to an integer allows it to be added to y without errors.
c) Use str(y) to convert y to a string
@ No. This works, but the operation will concatenate, not add values.
d) Remove the + operator
@ No. Removing the '+' operator changes the operation entirely.

Title: Predicting Code Behavior
23) What will happen when the following code is executed?
<pre>for i in range(3):
print("Hello", i * 2)</pre>

a) "Hello 2" is printed three times
@ No. The value of i changes during each loop iteration.
b) The program throws an error
@ No. The code is valid and does not throw an error.
*c) "Hello 0", "Hello 2", "Hello 4" are printed
@ Yes. The loop multiplies i by 2, printing "Hello 0", "Hello 2", and "Hello 4".
d) "Hello 0" is printed once
@ No. The loop runs three times, not once.

Title: Writing Simple Code
24) Which of the following lines of code will correctly print the sum of 7 and 5?
a) print("7 + 5")
@ No. This prints the string "7 + 5" instead of calculating the sum.
b) print("7" + "5")
@ No. This concatenates two strings, resulting in "75".
*c) print(7 + 5)
@ Yes. This correctly calculates and prints the sum of 7 and 5.
d) x = 7, y = 5, print x + y
@ No. This is not valid syntax in Python. Commas cannot be used this way.


Title: Analyzing String Operations
25) What will the following code print?
<pre>text = "Python"
result = text[:3] + text[-3:]
print(result)</pre>

a) Pyhon
@ No. Look carefully at the slicing operations.
b) Pytton
@ No. Check both the first and last three characters of the string.
*c) Pyton
@ Yes. [:3] extracts "Pyt", and [-3:] extracts "ton", concatenating them into "Pyton".
d) PythonPython
@ No. This is not the result of the slicing and concatenation.
